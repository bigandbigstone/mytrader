# 图形界面终版
# 作者 SongLinshuo

# -*- coding: utf-8 -*-
# Form implementation generated from reading ui file 'e:\mytrader\BackTestGUI\Mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from  PyQt5.QtChart import (QChart, QChartView, QBarSeries, QBarSet, QBarCategoryAxis, QValueAxis)
from BackTest.backtest_copy_5 import BackTestManager
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QPainter, QPen

class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(1080, 720)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.orderflow = QtWidgets.QTableView(self.centralwidget)
        self.orderflow.setGeometry(QtCore.QRect(20, 20, 256, 311))
        self.orderflow.setObjectName("orderflow")

        self.orderlist = QtWidgets.QTableView(self.centralwidget)
        self.orderlist.setGeometry(QtCore.QRect(20, 360, 256, 331))
        self.orderlist.setObjectName("orderlist")
        
        self.histogram = QChartView(self.centralwidget)
        self.histogram.setGeometry(QtCore.QRect(310, 190, 731, 501))
        self.histogram.setObjectName("histogram")
        self.histogram.setRenderHint(QPainter.Antialiasing)
        
        self.strategy = QtWidgets.QTableView(self.centralwidget)
        self.strategy.setGeometry(QtCore.QRect(310, 20, 401, 141))
        self.strategy.setObjectName("strategy")

        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(830, 30, 181, 131))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")

        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")

        self.StartButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.StartButton.setObjectName("StartButton")
        self.verticalLayout.addWidget(self.StartButton)
        self.StartButton.clicked.connect(self.StartAction)

        self.NextButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.NextButton.setObjectName("NextButton")
        self.verticalLayout.addWidget(self.NextButton)
        self.NextButton.setEnabled(True)
        self.NextButton.clicked.connect(self.NextAction)

        self.ResetButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.ResetButton.setObjectName("ResetButton")
        self.verticalLayout.addWidget(self.ResetButton)
        self.ResetButton.clicked.connect(self.ResetAction)
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        self.p = BackTestManager(main_win=self)
        self.start = False

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "高频回测系统"))
        self.StartButton.setText(_translate("MainWindow", "开始"))
        self.NextButton.setText(_translate("MainWindow", "下一TICK"))
        self.ResetButton.setText(_translate("MainWindow", "重置"))

    def update_orderflow(self, orderf):
        self.model1 = QtGui.QStandardItemModel()
        self.model1.setHorizontalHeaderLabels(['操作', '方向', '价位', '容量'])
        self.orderflow.setModel(self.model1)
        for order in orderf:
            item1 = QtGui.QStandardItem(order[0])
            item2 = QtGui.QStandardItem(order[1])
            item3 = QtGui.QStandardItem(str(order[2]))
            item4 = QtGui.QStandardItem(str(order[3]))
            self.model1.appendRow([item1,item2,item3,item4])
        self.orderflow.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        # time.sleep(0.5)
        # pass

    def update_orderlist(self, orderl):
        self.model2 = QtGui.QStandardItemModel()
        self.model2.setHorizontalHeaderLabels(['订单号', '开平', '类型', '价位', '订单容量', '成交高度'])
        self.orderlist.setModel(self.model2)
        for order in orderl:
            item1 = QtGui.QStandardItem(str(order[0]))
            item2 = QtGui.QStandardItem('开仓' if order[1] == 0 else '平仓')
            item3 = QtGui.QStandardItem('买单' if order[2] == 0 else '卖单')
            item4 = QtGui.QStandardItem(str(order[3]))
            item5 = QtGui.QStandardItem(str(order[4]))
            item6 = QtGui.QStandardItem(str(order[5]))
            self.model2.appendRow([item1,item2,item3,item4,item5,item6])
        self.orderlist.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        # pass

    def update_strategy(self, evaluation):
        # ["合约名称" ,self.evaluater.cm, self.evaluater.capital,
        # self.evaluater.drawdown, self.evaluater.MAXDrawDown,
        # self.evaluater.MAXcapital, self.evaluater.MINcapital]
        self.model3 = QtGui.QStandardItemModel()
        self.model3.setHorizontalHeaderLabels(['合约名称', '合约系数', '用户净资产', '当前回撤', '最大回撤', '用户最高净资产', '用户最低净资产'])
        self.strategy.setModel(self.model3)

        item1 = QtGui.QStandardItem(evaluation[0])
        item2 = QtGui.QStandardItem(str(evaluation[1]))
        item3 = QtGui.QStandardItem(str(evaluation[2]))
        item4 = QtGui.QStandardItem(str(evaluation[3]))
        item5 = QtGui.QStandardItem(str(evaluation[4]))
        item6 = QtGui.QStandardItem(str(evaluation[5]))
        item7 = QtGui.QStandardItem(str(evaluation[6]))
        self.model3.appendRow([item1,item2,item3,item4,item5,item6,item7])
        self.strategy.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)

    def update_histogram(self, tick):
        barSet0 = QBarSet('历史订单')
        tmp = tick[10:15]
        tmp.reverse()
        barSet0.append(tmp)
        barSet0.append(tick[15:])
        #条状图        
        barSeries = QBarSeries()        
        barSeries.append(barSet0)
        #创建图表        
        chart = QChart()        
        chart.addSeries(barSeries)        
        chart.setTitle('当前tick订单簿情况')        
        #设置成动画显示                
        # chart.setAnimationOptions(QChart.SeriesAnimations)
        #设置横向坐标(X轴)        
        categories = list()
        tmp = tick[0:5]
        tmp.reverse()
        for t in tmp:
            categories.append(str(t))
        for t in tick[5:10]:
            categories.append(str(t))
        axisX = QBarCategoryAxis()
        axisX.append(categories)
        chart.addAxis(axisX, Qt.AlignBottom)
        barSeries.attachAxis(axisX)
        #设置纵向坐标(Y轴)        
        axisY = QValueAxis()        
        # axisY.setRange(0, 15)        
        chart.addAxis(axisY, Qt.AlignLeft)        
        barSeries.attachAxis(axisY)                
        #图例属性        
        chart.legend().setVisible(True)        
        chart.legend().setAlignment(Qt.AlignBottom)     
        #图表视图        
        self.histogram.setChart(chart)

    def StartAction(self):
        if not self.p is None:
            if self.start == False:
                self.p.runbytick = 0
                self.start = True
                self.StartButton.setText('结束')
                self.p.start()
            else:
                self.start = False
                self.StartButton.setText('开始')
                if self.p.isRunning:
                    self.p.terminate()
                    self.p.quit()
                self.p.index += 1
                # 此为强制中断补偿，暂时这么写，实验起来是对的
    
    def NextAction(self):
        if not self.p is None:
            if self.start == False:
                self.p.runbytick = 1
                self.p.start()

    def ResetAction(self):
        if not self.p is None:
            if self.p.isRunning:
                self.p.terminate()
                self.p.quit()
            self.p.index = 0

class MyWindow(QtWidgets.QMainWindow,Ui_MainWindow):
  def __init__(self):
    super(MyWindow,self).__init__()
    self.setupUi(self)